<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script type="text/javascript" src="script/d3.v3.js"> </script>
  
        

     
  </head>
  
  <style>
      #RadViz{
            float:left;position:absolute;left:50%; margin-top: 30px;  width:510px; height:510px;  border-width:0px; border-style:solid; border-color:#bfb7b0;
        }
  </style>
  <body>     
      <% include nav %>
      
      <div id="RadViz"> </div>
<script src="/kNN.js"></script>
<script src="/dunnsIndex.js"></script>
<script src="/permutation.js"></script>
<script src="/drawRadViz.js"></script>

<fieldset>
    <legend>PCA parmeters</legend>
    <br/>
    <label> Reduced Dimension number
        <input type="text" name="num" size="18">
    </label>
    <br/>
    <br/>
    <label>Dimension Reduction method</label>
    <select id="method">
        <option value="roubust">Roubust PCA</option>
        <option value="traditional">Traditional PCA</option>
        <option value="tsne">t-SNE</option>
    </select>
     <br/>
     <br/>
    <input type="submit" value="submit and redraw"/>
    
</fieldset>

<script type="text/javascript">
var DimNum = 5;                  //维度数
var ordertxt = [1,3,4,2,5];        //order顺序
var orderNum = ordertxt.length;  //order的个数
var UnitRadius=360/orderNum;     //每个单元的角度


var tmpmax=-99999;
var cluster_num = 2;

var tmpArr = get_permutation(DimNum);
var finalOrdertxt = new Array();

var centerX=240.0;               //圆心
var centerY=270.0;
var r = 190;                     //半径
var outerRadius = r+10;           //内半径
var innerRadius = r-10;           //外半径

var DimPoint = new Array();
var Radius = new Array();

var NodePoint =new Array();

//compute DimPoint
for(var i=0;i<orderNum;i++){
    DimPoint[i]=new Array();
}
for(var i=0; i<orderNum;i++){
    Radius[i] = (UnitRadius*i)*Math.PI/180;
    DimPoint[i][0]=r*Math.cos(Radius[i]);  //DA的x坐标
    DimPoint[i][1]=r*Math.sin(Radius[i]);  //DA的y坐标
    DimPoint[i][2]=ordertxt[i];            //DA的值
}
//compute Data Point
d3.csv("/cardiac.csv",function(RecordData){

    for(var i=0;i<RecordData.length;i++){
        NodePoint[i]=new Array();
    }

    for(var i=0;i<RecordData.length;i++){
        var tt=RecordData[i].dimData;
        var t1=tt.split(",");
        for(var j=0;j<t1.length;j++){
            t1[j]=parseFloat(t1[j]);
        }
        RecordData[i].dimData = t1;
    }

    for(var ii = 0 ;ii<tmpArr.length;ii++) {
        ordertxt = tmpArr[ii].slice();
        var RecordData1 = RecordData.slice();

        for (var i = 0; i < RecordData1.length; i++) {
            var t1 = RecordData1[i].dimData;

            var t2 = new Array(t1.length);
            for (var k = 1; k <= ordertxt.length; k++) {
                t2[k - 1] = t1[ordertxt[k - 1] - 1];
            }
//        console.log(t2)
//        console.log(t1+" ---")
            RecordData1[i].dimData = t2;
        }

    var dataStr = "";
    for(var i=0;i<RecordData.length;i++){
        var SumDown = getSumDown(RecordData[i].dimData,orderNum);
        var SumUpX = getSumUpX(RecordData[i].dimData,Radius,orderNum);
        var SumUpY = getSumUpY(RecordData[i].dimData,Radius,orderNum);
        var CoordX = SumUpX/SumDown;
        var CoordY = SumUpY/SumDown;
        NodePoint[i][0] = CoordX+centerX;
        NodePoint[i][1] = CoordY+centerY;
        NodePoint[i][2] = parseFloat(RecordData[i].classId)+1;
        NodePoint[i][3] = RecordData[i].id;
        dataStr = dataStr+NodePoint[i][3]+","+NodePoint[i][0]+","+NodePoint[i][1]+","+NodePoint[i][2]+"\n";
    }
//                console.log(dataStr);
//				console.log(dataStr);
        var tmp = dunnsIndex(2,NodePoint);
        if(tmp > tmpmax)
        {
            tmpmax=tmp;

            finalOrdertxt=ordertxt.slice();
            FianlNodePoint = clone(NodePoint);
            console.log(finalOrdertxt+" tmp: "+tmpmax);

        }
        else
        {
            console.log(tmp+" "+ordertxt);

        }


    }



    var width = 600, height = 500;

    var svg = d3.select(RadViz).append("svg").attr("width",width).attr("height", height) ;


    var dimdata = [];
    for ( var i = 0; i < DimNum; i++) {
        dimdata[i] = 1;
    }


//draw arc
    var pie = d3.layout.pie().sort(null);
    var arc = d3.svg.arc()
                    .startAngle(function(d,i){
                        return (UnitRadius*i+90-0.5*UnitRadius+1)* Math.PI/180})
                    .endAngle(function(d,i){return (UnitRadius*i+90+0.5*UnitRadius)*Math.PI/180})
                    .innerRadius(innerRadius)
                    .outerRadius(outerRadius)
            ;
    var arcs = svg.selectAll("g.arc").data(pie(dimdata)).enter()
                    .append("g").attr("class", "arc").attr("transform",
                            "translate(" + centerX + "," + centerY + ")")
            ;
    arcs.append("path")
        //.style("stroke","red")
        //.style("stroke-opacity",0)
        //	.style("stroke-width",0)
            .attr("fill",function(d, i) {
                var color1=["#006650","#f5ab00","#db4527","#005687","#ffccdd"];
                return color1[i];
            })
            .attr("d", arc);
//show Dimension Point
    svg.selectAll("circle")
            .data(DimPoint)
            .enter()
            .append("circle")
            .attr("cx", function(d) {
                return d[0]+centerX;
            })
            .attr("cy", function(d) {
                return d[1]+centerY;
            }).attr("r", 4)
            .attr("opacity",0.8);

    svg.selectAll("text")
            .data(DimPoint)
            .enter()
            .append("text")
            .text(function(d) {
                return d[2];
            })
            .attr("x", function(d) {
                return d[0]+centerX ;
            }).attr("y", function(d) {
                return d[1]+centerY;
            }).attr("font-family", "sans-serif")
            .attr("font-size", 15)
            .attr("stroke-width",2)
            .attr("fill", "black");


//show data point
    var Nodes = svg.selectAll("RadViz")
            .data(FianlNodePoint)
            .enter()
            .append("circle")
            .attr("class", "node")
            .attr("id",function(d,i){return i;})
            .attr("cx",function(d,i){ return d[0]; })
            .attr("cy",function(d,i){return d[1];})
            .attr("r", 4.5)
            .attr("class","nodes")
            .style("opacity",0.8)
            .style("fill",function(d, i) {
                var color;
                if (d[2] == "1")
                    color = "#ffc2ce";
                else if (d[2] == "2")
                    color = "#0ffa1d";
                else if (d[2] == "0")
                    color = "#fee905";
                return color;
            });

    Nodes.on("mouseenter",function(){d3.select(this).style('fill','red')

        var x = d3.select(this).attr('cx');
        var y = d3.select(this).attr('cy');

//                    alert(x+" "+y)
//                    var sequence = new Array();
        sequence = kNN(NodePoint,[x,y],5);
        var NN=  Nodes.filter(function(d,i){
            var flag=false;
            for(var i=0;i<sequence.length;i++)
            {
                if(d[3]==sequence[i]){
                    flag=true;
                }
            }
            return flag;
        }).style('fill','red')

    })
            .on('mouseleave',function(d,i){Nodes.style("fill",function(d, i) {
                var color;
                if (d[2] == "1")
                    color = "#ffc2ce";
                else if (d[2] == "2")
                    color = "#0ffa1d";
                else if (d[2] == "0")
                    color = "#fee905";
                return color;
            })})

            .style("stroke", "black")
            .style("stroke-width", 0.8)
            .append("title")
            .text(function(d) { return "point"+d[3]+"-class:"+d[2]; })

//    Nodes.on('click',function(d,i){
//
////                   var x = d3.select(this).attr('cx')
////                   var y = d3.select(this).attr('cy')
//
//        var x = d[0];
//        var y = d[1];
//
////                    alert(x+" "+y)
////                    var sequence = new Array();
//        sequence = kNN(NodePoint,[x,y],5);
////                    alert(sequence);
//        var Str="";
//        for(var kk=0;kk<sequence.length;kk++){
//            Str=Str+NodePoint[sequence[kk]][2]+"  ";
//        }
//        alert(Str);
//
//
//
//    })

//    var KNum =15;
//    var right = 0;
//    for(var i=0;i<NodePoint.length;i++) {
//        var tmp = new Array();
//        tmp = [NodePoint[i][0], NodePoint[i][1]];
////                    console.log(tmp);
//
//        sequence = kNN(NodePoint, tmp, KNum);
//        var count1 = 0;
//        var count2 = 0;
//        var count3 = 0;
//        for (var kk = 0; kk < sequence.length; kk++) {
//            if (NodePoint[sequence[kk]][2] == 1) {
//                count1++;
//            } else if (NodePoint[sequence[kk]][2] == 2) {
//                count2++;
//            } else if (NodePoint[sequence[kk]][2] == 3) {
//                count3++;
//            }
//        }
//
//        var max = Math.max(count1, Math.max(count2, count3))
//        var predict = 0;
//        if (count1 == max) {
//            predict = 1;
//        } else if (count2 == max) {
//            predict = 2;
//        } else if (count3 == max) {
//            predict = 3;
//        }
//        if (NodePoint[i][2] == predict) {
//            right++;
//        } else {
//            console.log("predict is " + predict + " NodePoint is " + NodePoint[i][2])
//        }
//    }
//    console.log(right);

    var dunnsindex = (dunnsIndex(cluster_num,NodePoint));
    console.log(dunnsindex);

    svg.append('text')
            .text('Dunns Index: '+dunnsindex.toFixed(3))
            .attr('x',width)
            .attr('y',height)
            .attr('dx',-250)
});//.data

function getSumUpX(RecordData,Radius,orderNum){
    var TempUpX=0;
    for(var i=0;i<orderNum;i++){
        TempUpX=TempUpX+r*RecordData[i]*Math.cos(Radius[i]);
    }
    return TempUpX;
}
function getSumUpY(RecordData,Radius,orderNum){
    var TempUpY=0;
    for(var i=0;i<orderNum;i++){
        TempUpY=TempUpY+r*RecordData[i]*Math.sin(Radius[i]);
    }
    return TempUpY;
}
function getSumDown(RecordData,orderNum){
    var TempDown=0;
    for(var i=0;i<orderNum;i++){
        TempDown =TempDown+RecordData[i];
    }
    return TempDown;
}
</script>



<br/>
<br/>
<br/>
<br/>
<br/>
<br/>

<br/>
<br/>
<br/>
<br/>
<br/>
<br/>

<br/>
<br/>
<br/>
<br/>
<br/>
<br/>

<fieldset>
    <legend>MDS parmeters</legend>
    <br/>
    <label> Reduced Dimension number
        <input type="text" name="num" size="18">
    </label>
    <br/>
    <br/>
    <label>Dimension Reduction method</label>
    <select id="method">
        <option value="MetricMDS">Metric MDS</option>
        <option value="NonmetricMDS">Nonmetric MDS</option>
    </select>
     <br/>
     <br/>
    <input type="submit" value="submit and redraw"/>
    
</fieldset>






<script type="text/javascript">
var DimNum = 5;                  //维度数
var ordertxt = [1,3,4,2,5];        //order顺序
var orderNum = ordertxt.length;  //order的个数
var UnitRadius=360/orderNum;     //每个单元的角度


var tmpmax=-99999;
var cluster_num = 2;

var tmpArr = get_permutation(DimNum);
var finalOrdertxt = new Array();

var centerX=240.0;               //圆心
var centerY=270.0;
var r = 190;                     //半径
var outerRadius = r+10;           //内半径
var innerRadius = r-10;           //外半径

var DimPoint = new Array();
var Radius = new Array();

var NodePoint =new Array();

//compute DimPoint
for(var i=0;i<orderNum;i++){
    DimPoint[i]=new Array();
}
for(var i=0; i<orderNum;i++){
    Radius[i] = (UnitRadius*i)*Math.PI/180;
    DimPoint[i][0]=r*Math.cos(Radius[i]);  //DA的x坐标
    DimPoint[i][1]=r*Math.sin(Radius[i]);  //DA的y坐标
    DimPoint[i][2]=ordertxt[i];            //DA的值
}
//compute Data Point
d3.csv("/cardiac_mds.csv",function(RecordData){

    for(var i=0;i<RecordData.length;i++){
        NodePoint[i]=new Array();
    }

    for(var i=0;i<RecordData.length;i++){
        var tt=RecordData[i].dimData;
        var t1=tt.split(",");
        for(var j=0;j<t1.length;j++){
            t1[j]=parseFloat(t1[j]);
        }
        RecordData[i].dimData = t1;
    }

    for(var ii = 0 ;ii<tmpArr.length;ii++) {
        ordertxt = tmpArr[ii].slice();
        var RecordData1 = RecordData.slice();

        for (var i = 0; i < RecordData1.length; i++) {
            var t1 = RecordData1[i].dimData;

            var t2 = new Array(t1.length);
            for (var k = 1; k <= ordertxt.length; k++) {
                t2[k - 1] = t1[ordertxt[k - 1] - 1];
            }
//        console.log(t2)
//        console.log(t1+" ---")
            RecordData1[i].dimData = t2;
        }

    var dataStr = "";
    for(var i=0;i<RecordData.length;i++){
        var SumDown = getSumDown(RecordData[i].dimData,orderNum);
        var SumUpX = getSumUpX(RecordData[i].dimData,Radius,orderNum);
        var SumUpY = getSumUpY(RecordData[i].dimData,Radius,orderNum);
        var CoordX = SumUpX/SumDown;
        var CoordY = SumUpY/SumDown;
        NodePoint[i][0] = CoordX+centerX;
        NodePoint[i][1] = CoordY+centerY;
        NodePoint[i][2] = parseFloat(RecordData[i].classId)+1;
        NodePoint[i][3] = RecordData[i].id;
        dataStr = dataStr+NodePoint[i][3]+","+NodePoint[i][0]+","+NodePoint[i][1]+","+NodePoint[i][2]+"\n";
    }
//                console.log(dataStr);
//				console.log(dataStr);
        var tmp = dunnsIndex(2,NodePoint);
        if(tmp > tmpmax)
        {
            tmpmax=tmp;

            finalOrdertxt=ordertxt.slice();
            FianlNodePoint = clone(NodePoint);
            console.log(finalOrdertxt+" tmp: "+tmpmax);

        }
        else
        {
            console.log(tmp+" "+ordertxt);

        }


    }



    var width = 600, height = 500;

    var svg = d3.select(RadViz).append("svg").attr("width",width).attr("height", height) ;


    var dimdata = [];
    for ( var i = 0; i < DimNum; i++) {
        dimdata[i] = 1;
    }


//draw arc
    var pie = d3.layout.pie().sort(null);
    var arc = d3.svg.arc()
                    .startAngle(function(d,i){
                        return (UnitRadius*i+90-0.5*UnitRadius+1)* Math.PI/180})
                    .endAngle(function(d,i){return (UnitRadius*i+90+0.5*UnitRadius)*Math.PI/180})
                    .innerRadius(innerRadius)
                    .outerRadius(outerRadius)
            ;
    var arcs = svg.selectAll("g.arc").data(pie(dimdata)).enter()
                    .append("g").attr("class", "arc").attr("transform",
                            "translate(" + centerX + "," + centerY + ")")
            ;
    arcs.append("path")
        //.style("stroke","red")
        //.style("stroke-opacity",0)
        //	.style("stroke-width",0)
            .attr("fill",function(d, i) {
                var color1=["#006650","#f5ab00","#db4527","#005687","#ffccdd"];
                return color1[i];
            })
            .attr("d", arc);
//show Dimension Point
    svg.selectAll("circle")
            .data(DimPoint)
            .enter()
            .append("circle")
            .attr("cx", function(d) {
                return d[0]+centerX;
            })
            .attr("cy", function(d) {
                return d[1]+centerY;
            }).attr("r", 4)
            .attr("opacity",0.8);

    svg.selectAll("text")
            .data(DimPoint)
            .enter()
            .append("text")
            .text(function(d) {
                return d[2];
            })
            .attr("x", function(d) {
                return d[0]+centerX ;
            }).attr("y", function(d) {
                return d[1]+centerY;
            }).attr("font-family", "sans-serif")
            .attr("font-size", 15)
            .attr("stroke-width",2)
            .attr("fill", "black");


//show data point
    var Nodes = svg.selectAll("RadViz")
            .data(FianlNodePoint)
            .enter()
            .append("circle")
            .attr("class", "node")
            .attr("id",function(d,i){return i;})
            .attr("cx",function(d,i){ return d[0]; })
            .attr("cy",function(d,i){return d[1];})
            .attr("r", 4.5)
            .attr("class","nodes")
            .style("opacity",0.8)
            .style("fill",function(d, i) {
                var color;
                if (d[2] == "1")
                    color = "#ffc2ce";
                else if (d[2] == "2")
                    color = "#0ffa1d";
                else if (d[2] == "0")
                    color = "#fee905";
                return color;
            });

    Nodes.on("mouseenter",function(){d3.select(this).style('fill','red')

        var x = d3.select(this).attr('cx');
        var y = d3.select(this).attr('cy');

//                    alert(x+" "+y)
//                    var sequence = new Array();
        sequence = kNN(NodePoint,[x,y],5);
        var NN=  Nodes.filter(function(d,i){
            var flag=false;
            for(var i=0;i<sequence.length;i++)
            {
                if(d[3]==sequence[i]){
                    flag=true;
                }
            }
            return flag;
        }).style('fill','red')

    })
            .on('mouseleave',function(d,i){Nodes.style("fill",function(d, i) {
                var color;
                if (d[2] == "1")
                    color = "#ffc2ce";
                else if (d[2] == "2")
                    color = "#0ffa1d";
                else if (d[2] == "0")
                    color = "#fee905";
                return color;
            })})

            .style("stroke", "black")
            .style("stroke-width", 0.8)
            .append("title")
            .text(function(d) { return "point"+d[3]+"-class:"+d[2]; })

//    Nodes.on('click',function(d,i){
//
////                   var x = d3.select(this).attr('cx')
////                   var y = d3.select(this).attr('cy')
//
//        var x = d[0];
//        var y = d[1];
//
////                    alert(x+" "+y)
////                    var sequence = new Array();
//        sequence = kNN(NodePoint,[x,y],5);
////                    alert(sequence);
//        var Str="";
//        for(var kk=0;kk<sequence.length;kk++){
//            Str=Str+NodePoint[sequence[kk]][2]+"  ";
//        }
//        alert(Str);
//
//
//
//    })

//    var KNum =15;
//    var right = 0;
//    for(var i=0;i<NodePoint.length;i++) {
//        var tmp = new Array();
//        tmp = [NodePoint[i][0], NodePoint[i][1]];
////                    console.log(tmp);
//
//        sequence = kNN(NodePoint, tmp, KNum);
//        var count1 = 0;
//        var count2 = 0;
//        var count3 = 0;
//        for (var kk = 0; kk < sequence.length; kk++) {
//            if (NodePoint[sequence[kk]][2] == 1) {
//                count1++;
//            } else if (NodePoint[sequence[kk]][2] == 2) {
//                count2++;
//            } else if (NodePoint[sequence[kk]][2] == 3) {
//                count3++;
//            }
//        }
//
//        var max = Math.max(count1, Math.max(count2, count3))
//        var predict = 0;
//        if (count1 == max) {
//            predict = 1;
//        } else if (count2 == max) {
//            predict = 2;
//        } else if (count3 == max) {
//            predict = 3;
//        }
//        if (NodePoint[i][2] == predict) {
//            right++;
//        } else {
//            console.log("predict is " + predict + " NodePoint is " + NodePoint[i][2])
//        }
//    }
//    console.log(right);

    var dunnsindex = (dunnsIndex(cluster_num,NodePoint));
    console.log(dunnsindex);

    svg.append('text')
            .text('Dunns Index: '+dunnsindex.toFixed(3))
            .attr('x',width)
            .attr('y',height)
            .attr('dx',-250)
});//.data

function getSumUpX(RecordData,Radius,orderNum){
    var TempUpX=0;
    for(var i=0;i<orderNum;i++){
        TempUpX=TempUpX+r*RecordData[i]*Math.cos(Radius[i]);
    }
    return TempUpX;
}
function getSumUpY(RecordData,Radius,orderNum){
    var TempUpY=0;
    for(var i=0;i<orderNum;i++){
        TempUpY=TempUpY+r*RecordData[i]*Math.sin(Radius[i]);
    }
    return TempUpY;
}
function getSumDown(RecordData,orderNum){
    var TempDown=0;
    for(var i=0;i<orderNum;i++){
        TempDown =TempDown+RecordData[i];
    }
    return TempDown;
}
</script>


      
  </body>
</html>