/**
 * Created by Chih-Hao on 15/11/27.
 */


var data = [[5.1,3.5,1.4,0.2,1],
    [4.9,3.0,1.4,0.2,1],
    [4.7,3.2,1.3,0.2,1],
    [4.6,3.1,1.5,0.2,1],
    [5.0,3.6,1.4,0.2,1],
    [5.4,3.9,1.7,0.4,1],
    [4.6,3.4,1.4,0.3,1],
    [5.0,3.4,1.5,0.2,1],
    [4.4,2.9,1.4,0.2,1],
    [4.9,3.1,1.5,0.1,1],
    [5.4,3.7,1.5,0.2,1],
    [4.8,3.4,1.6,0.2,1],
    [4.8,3.0,1.4,0.1,1],
    [4.3,3.0,1.1,0.1,1],
    [5.8,4.0,1.2,0.2,1],
    [5.7,4.4,1.5,0.4,1],
    [5.4,3.9,1.3,0.4,1],
    [5.1,3.5,1.4,0.3,1],
    [5.7,3.8,1.7,0.3,1],
    [5.1,3.8,1.5,0.3,1],
    [5.4,3.4,1.7,0.2,1],
    [5.1,3.7,1.5,0.4,1],
    [4.6,3.6,1.0,0.2,1],
    [5.1,3.3,1.7,0.5,1],
    [4.8,3.4,1.9,0.2,1],
    [5.0,3.0,1.6,0.2,1],
    [5.0,3.4,1.6,0.4,1],
    [5.2,3.5,1.5,0.2,1],
    [5.2,3.4,1.4,0.2,1],
    [4.7,3.2,1.6,0.2,1],
    [4.8,3.1,1.6,0.2,1],
    [5.4,3.4,1.5,0.4,1],
    [5.2,4.1,1.5,0.1,1],
    [5.5,4.2,1.4,0.2,1],
    [4.9,3.1,1.5,0.1,1],
    [5.0,3.2,1.2,0.2,1],
    [5.5,3.5,1.3,0.2,1],
    [4.9,3.1,1.5,0.1,1],
    [4.4,3.0,1.3,0.2,1],
    [5.1,3.4,1.5,0.2,1],
    [5.0,3.5,1.3,0.3,1],
    [4.5,2.3,1.3,0.3,1],
    [4.4,3.2,1.3,0.2,1],
    [5.0,3.5,1.6,0.6,1],
    [5.1,3.8,1.9,0.4,1],
    [4.8,3.0,1.4,0.3,1],
    [5.1,3.8,1.6,0.2,1],
    [4.6,3.2,1.4,0.2,1],
    [5.3,3.7,1.5,0.2,1],
    [5.0,3.3,1.4,0.2,1],
    [7.0,3.2,4.7,1.4,1,2],
    [6.4,3.2,4.5,1.5,2],
    [6.9,3.1,4.9,1.5,2],
    [5.5,2.3,4.0,1.3,2],
    [6.5,2.8,4.6,1.5,2],
    [5.7,2.8,4.5,1.3,2],
    [6.3,3.3,4.7,1.6,2],
    [4.9,2.4,3.3,1.0,2],
    [6.6,2.9,4.6,1.3,2],
    [5.2,2.7,3.9,1.4,2],
    [5.0,2.0,3.5,1.0,2],
    [5.9,3.0,4.2,1.5,2],
    [6.0,2.2,4.0,1.0,2],
    [6.1,2.9,4.7,1.4,2],
    [5.6,2.9,3.6,1.3,2],
    [6.7,3.1,4.4,1.4,2],
    [5.6,3.0,4.5,1.5,2],
    [5.8,2.7,4.1,1.0,2],
    [6.2,2.2,4.5,1.5,2],
    [5.6,2.5,3.9,1.1,2],
    [5.9,3.2,4.8,1.8,2],
    [6.1,2.8,4.0,1.3,2],
    [6.3,2.5,4.9,1.5,2],
    [6.1,2.8,4.7,1.2,2],
    [6.4,2.9,4.3,1.3,2],
    [6.6,3.0,4.4,1.4,2],
    [6.8,2.8,4.8,1.4,2],
    [6.7,3.0,5.0,1.7,2],
    [6.0,2.9,4.5,1.5,2],
    [5.7,2.6,3.5,1.0,2],
    [5.5,2.4,3.8,1.1,2],
    [5.5,2.4,3.7,1.0,2],
    [5.8,2.7,3.9,1.2,2],
    [6.0,2.7,5.1,1.6,2],
    [5.4,3.0,4.5,1.5,2],
    [6.0,3.4,4.5,1.6,2],
    [6.7,3.1,4.7,1.5,2],
    [6.3,2.3,4.4,1.3,2],
    [5.6,3.0,4.1,1.3,2],
    [5.5,2.5,4.0,1.3,2],
    [5.5,2.6,4.4,1.2,2],
    [6.1,3.0,4.6,1.4,2],
    [5.8,2.6,4.0,1.2,2],
    [5.0,2.3,3.3,1.0,2],
    [5.6,2.7,4.2,1.3,2],
    [5.7,3.0,4.2,1.2,2],
    [5.7,2.9,4.2,1.3,2],
    [6.2,2.9,4.3,1.3,2],
    [5.1,2.5,3.0,1.1,2],
    [5.7,2.8,4.1,1.3,2],
    [6.3,3.3,6.0,2.5,3],
    [5.8,2.7,5.1,1.9,3],
    [7.1,3.0,5.9,2.1,3],
    [6.3,2.9,5.6,1.8,3],
    [6.5,3.0,5.8,2.2,3],
    [7.6,3.0,6.6,2.1,3],
    [4.9,2.5,4.5,1.7,3],
    [7.3,2.9,6.3,1.8,3],
    [6.7,2.5,5.8,1.8,3],
    [7.2,3.6,6.1,2.5,3],
    [6.5,3.2,5.1,2.0,3],
    [6.4,2.7,5.3,1.9,3],
    [6.8,3.0,5.5,2.1,3],
    [5.7,2.5,5.0,2.0,3],
    [5.8,2.8,5.1,2.4,3],
    [6.4,3.2,5.3,2.3,3],
    [6.5,3.0,5.5,1.8,3],
    [7.7,3.8,6.7,2.2,3],
    [7.7,2.6,6.9,2.3,3],
    [6.0,2.2,5.0,1.5,3],
    [6.9,3.2,5.7,2.3,3],
    [5.6,2.8,4.9,2.0,3],
    [7.7,2.8,6.7,2.0,3],
    [6.3,2.7,4.9,1.8,3],
    [6.7,3.3,5.7,2.1,3],
    [7.2,3.2,6.0,1.8,3],
    [6.2,2.8,4.8,1.8,3],
    [6.1,3.0,4.9,1.8,3],
    [6.4,2.8,5.6,2.1,3],
    [7.2,3.0,5.8,1.6,3],
    [7.4,2.8,6.1,1.9,3],
    [7.9,3.8,6.4,2.0,3],
    [6.4,2.8,5.6,2.2,3],
    [6.3,2.8,5.1,1.5,3],
    [6.1,2.6,5.6,1.4,3],
    [7.7,3.0,6.1,2.3,3],
    [6.3,3.4,5.6,2.4,3],
    [6.4,3.1,5.5,1.8,3],
    [6.0,3.0,4.8,1.8,3],
    [6.9,3.1,5.4,2.1,3],
    [6.7,3.1,5.6,2.4,3],
    [6.9,3.1,5.1,2.3,3],
    [5.8,2.7,5.1,1.9,3],
    [6.8,3.2,5.9,2.3,3],
    [6.7,3.3,5.7,2.5,3],
    [6.7,3.0,5.2,2.3,3],
    [6.3,2.5,5.0,1.9,3],
    [6.5,3.0,5.2,2.0,3],
    [6.2,3.4,5.4,2.3,3],
    [5.9,3.0,5.1,1.8,3]]

function EuclidDistance(a,b){
    var tmpDis=0.0;

    for(var i=0;i< b.length-1;i++)
    {
        tmpDis=tmpDis+(a[i]-b[i])*(a[i]-b[i]);
    }
//	console.log('tmpDis is:'+ Math.sqrt(tmpDis));
    return Math.sqrt(tmpDis);

}

function kNN(data,newData,k) {

    var distance = new Array();
    for(var i =0;i<data.length;i++)
        distance[i]=EuclidDistance(data[i],newData);

    var tmpDistance = new Array();
    for(var j =0;j<distance.length;j++)
    {
        tmpDistance[j]=new Array();
        tmpDistance[j][0]=distance[j];
        tmpDistance[j][1]=j;
        //            console.log(tmpDistance[j][0]+" point"+tmpDistance[j][1]);

    }

    tmpDistance.sort(function(a,b){return a[0]- b[0]});

    //        console.log(s)

    var sequence = new Array();

    for(var jj=0;jj<k;jj++)
    {
        //            str=str+tmpDistance[jj+1][1]+" "+tmpDistance[jj+1][0]+'\n';

        sequence[jj]=tmpDistance[jj+1][1];
    }
    //        console.log(str)
    return sequence;
}


var kNum = 3;
var right = 0;
for(var i=0;i<data.length;i++)
{
    var tmp = data[i];
    sequence = kNN(data,tmp,kNum);
//	console.log(sequence);
    var count1=0;
    var count2=0;
    var count3=0;
    for(var kk=0;kk<sequence.length;kk++)
    {
        if(data[sequence[kk]][4]==1){count1++;}
        else if (data[sequence[kk]][4]==2) {
            count2++;
        }else if (data[sequence[kk]][4]==3){
            count3++;
        }
    }

    var max =Math.max(count1,Math.max(count2,count3));
    var predictor = 0;
    if(count1==max)
    {
        predict=1;
    }else if (count2==max) {
        predict=2;
    }else if(count3==max){
        predict=3;
    }
    if(predict==tmp[4])
    {
        right++;
    }else {
//		console.log('predict is '+predict+" tmp is: "+tmp[4]);
    }


}
console.log(right);









